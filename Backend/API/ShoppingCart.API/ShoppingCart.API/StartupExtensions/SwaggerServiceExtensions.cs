using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using ShoppingCart.API.BusinessLogic;
using ShoppingCart.API.Models;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Web.Http;

namespace ShoppingCart.API
{
    /// <summary>
    /// Summary:
    ///    Represents the configuration definitions and usage of Swagger UI documentation
    /// </summary>
    public static class SwaggerServiceExtensions
    {
        internal const string AUTHORIZATION_SCHEME_NAME = "Bearer";

        /// <summary>
        /// Apply configuration for Swagger API documentation
        /// </summary>
        /// <param name="services">Service reference</param>
        /// <returns>Updated configuration of the service reference</returns>
        public static IServiceCollection AddSwaggerDocumentation(this IServiceCollection services)
        {
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "ShoppingCart Web API", Version = "v1" });
                /**
                 * Helps swagger identify the controller based on versioning without conflicts.
                 * Error Details: Actions require a unique method/path combination for Swagger/OpenAPI 3.0
                 * Solution: Call ResolveConflictingActions.
                 */
                c.ResolveConflictingActions(apiDescription => apiDescription.First());

                /*
                 * Add custom name to controllers for displaying in the Swagger documentation.
                 * Group name provided in the ApiExplorerSettings attribute will be mapped.
                 */
                c.TagActionsBy(apiDescriptionRef => new[] { apiDescriptionRef.GroupName });
                c.DocInclusionPredicate((groupName, apiDescriptionRef) => true);

                /**
                 * How to hide a property just in post request description of swagger using swashbuckle?
                 * Step 1: Install NuGet package: Swashbuckle.AspNetCore.Annotations
                 * Step 2: Call EnableAnnotations method detailed below
                 * Step 3: Use the attribute 'SwaggerSchema to ReadOnly' in the property that needs to be hidden.
                 */
                c.EnableAnnotations();
                /**
                 * Map the autogenerated xml file which contains the description of each implementation to the Swagger documentation.
                 */
                c.IncludeXmlComments(Path.Combine(System.AppContext.BaseDirectory, "ShoppingCart.API.xml"));
                c.IncludeXmlComments(AboutModelLibrary.XMLDocumentationFilePath);

                /**
                 * Adds a green padlock icon at the top of the Swagger UI documentation to include the JWT token.
                 * This defintion will be used by OperationFilter to apply popup at individual endpoints.
                 */
                c.AddSecurityDefinition(AUTHORIZATION_SCHEME_NAME,
                    new OpenApiSecurityScheme
                    {
                        Description = "JWT Authorization header using the Bearer scheme.",
                        Type = SecuritySchemeType.Http, //We set the scheme type to http since we're using bearer authentication
                        Scheme = "bearer" //The name of the HTTP Authorization scheme to be used in the Authorization header. In this case "bearer".
                    });

                //IOperationFilter is used to apply padlock icon only for endpoints with attributes - Microsoft.AspNetCore.Authorization.AuthorizeAttribute
                c.OperationFilter<AuthResponsesOperationFilter>();
            });
            return services;
        }

        /// <summary>
        /// Extension method that applies the Swagger UI configuration.
        /// </summary>
        /// <param name="app">Application builder reference</param>
        /// <returns>Updated configuration of the Application builder reference</returns>
        public static IApplicationBuilder UseSwaggerDocumentation(this IApplicationBuilder app)
        {
            app.UseSwagger();
            app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "ShoppingCart.API v1"));
            return app;
        }
    }

    /// <summary>
    /// Summary:
    ///     Represents the configuration of each endpoint in the SwaggerUI that needs JWT token authorization represented by a padlock icon.
    /// </summary>
    public class AuthResponsesOperationFilter : IOperationFilter
    {
        /// <summary>
        /// Implement the interface method IOperationFilter which applies a padlock to the endpoint of the defined custom attribute.
        /// </summary>
        /// <param name="operation"></param>
        /// <param name="context"></param>
        public void Apply(OpenApiOperation operation, OperationFilterContext context)
        {
            var authAttributes = context.MethodInfo.DeclaringType.GetCustomAttributes(true)
                .Union(context.MethodInfo.GetCustomAttributes(true))
                .OfType<Microsoft.AspNetCore.Authorization.AuthorizeAttribute>(); //Custom attribute applied to the the endpoints that need authorization.

            if (authAttributes.Any())
            {
                var securityRequirement = new OpenApiSecurityRequirement
                {
                    //Initializing the dictionary
                    {
                        new OpenApiSecurityScheme //Dictionary Key
                        {
                            Reference = new OpenApiReference
                            {
                                Id = SwaggerServiceExtensions.AUTHORIZATION_SCHEME_NAME, //This name has to match the name provided in the AddSecurityDefinition method for the popup to work in the said method.
                                Type = ReferenceType.SecurityScheme
                            }
                        }, new List<string>() //Dictionary Value
                    }
                };
                operation.Security = new List<OpenApiSecurityRequirement> { securityRequirement };
                operation.Responses.Add("401", new OpenApiResponse { Description = "Unauthorized" });
            }
        }
    }
}
